import os
import sys
import json

debug = False
line_count = 0
unprocessed_lines = []
processed_lines = []
config = {}
config_path = 'home/ivo/.ftf-script-eater'

def say(arg_mode, message):
    mode = {
            0: "INFO",
            1: "WARN",
            2: "ERROR",
            3: "DEBUG"
        }

    print("[" + mode[arg_mode] + "]: " + message)

def check_directory(directory, subdirectories):
    path_exists = True

    if not os.path.isdir(directory):
        os.mkdir(directory)
        path_exists = False

    if len(subdirectories) > 0:
        delimeter = '/'

        if directory == '/':
            delimeter = ''

        directory = directory + delimeter + subdirectories.pop(0)
        res = check_directory(directory, subdirectories)

        if res == False:
            path_exists = res

    return path_exists

def load_config(filename):
    global config
    config_file = open(filename, 'r')
    config = json.load(config_file)
    config_file.close()

def save_config(filename):
    global config
    config_file = open(filename, 'w+')
    config_file.write(json.dumps(config))
    config_file.close()

def tupleize_line(line):
    tagged_line = line.split(': ')

    if len(tagged_line) == 1:
        return ('', tagged_line[0])
    else:
        return (tagged_line[0], tagged_line[1])

def tuple_is_empty(tuple):
    return tuple == ('','')

def grab_from_unprocessed(index):
    global line_count
    if index < line_count:
        line = unprocessed_lines[index]
        return tupleize_line(line)
    else:
        raise 'index not in range of existing unprocessed lines'
        exit(1)

def grab_filename_from_num(num):
    suffix = '_temp.txt'

    if num < 10:
        return '00' + str(num) + suffix
    elif num < 100:
        return '0' + str(num) + suffix

def main():
    global debug
    global config_path
    global line_count
    global unprocessed_lines
    global processed_lines

    episode_number = int(sys.argv[1])

    try:
        debug = boolean(sys.argv[2])
        print(debug)
    except:
        debug = False

    if check_directory("/", config_path.split('/')):
        config_path = '/' + config_path + '/config.json'
        if not os.path.isfile(config_path):
            say(2, "Config file in path: " + config_path + "does not exist!")
            exit(1)
    else:
        say(2, "Path to config: " + config_path + " did not exist but has been autogenerated!")
        exit(2)

    # Load the config
    load_config(config_path)

    # Check the scripts folders
    check_directory('/', config['raw-transcripts-path'].split('/'))
    check_directory('/', config['formatted-transcripts-path'].split('/'))

    # Read and format the file put it in [lines]
    raw_file = open(config['raw-transcripts-path'] + grab_filename_from_num(episode_number),'r')

    for i in raw_file:
        i = i.strip()
        unprocessed_lines.append(i)
        if debug: print('Adding line on heap of size ' + str(len(unprocessed_lines)) + '\t:\t' + i , end='\n', flush=True)

    raw_file.close()

    line_count = len(unprocessed_lines)
    i = 0
    last_known_actor = None
    print('##:\t','EMPTY:','\t','TUPLE:')

    while i < line_count:
        line_1 = grab_from_unprocessed(i)
        line_2 = grab_from_unprocessed(i + 1)

        if line_1[0] != '':
            last_known_actor = line_1[0]
        elif line_2[0] != '':
            last_known_actor = line_2[0]

        # [END] Auto inject actors for blank tags

        # if line_1[0] == '':
        #     line_1 = (last_known_actor, line_1[1])
        #
        # if line_2[0] == '':
        #     line_2 = (last_known_actor, line_2[1])

        # [END] Print Stuff
        print('l1:\t',tuple_is_empty(line_1),'\t\t',line_1)
        print('l2:\t',tuple_is_empty(line_2),'\t\t',line_2)

        i = i + 2

    save_config(config_path)

if __name__ == '__main__':
    main()
